name: Build and Deploy

run-name: Déploiement en production

on:
  push:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: exercice-4-testing-battle
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/exercice-4-testing-battle:latest
          no-cache: true  
          pull: true      
          
  deploy-to-vps:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Copy files to VPS
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "docker-compose.prod.yml"
          target: /opt/your-app/

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd /opt/your-app
            # Se connecter à Docker Hub de façon sécurisée
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
            
            # Mettre à jour les images
            echo "Pulling latest images..."
            docker-compose -f docker-compose.prod.yml pull
            
            # Redémarrer les conteneurs avec le fichier docker-compose.prod.yml
            echo "Restarting containers with latest images..."
            docker-compose -f docker-compose.prod.yml up -d --force-recreate
            
            # Vérifier que les conteneurs sont bien démarrés
            echo "Checking container status..."
            sleep 5
            docker-compose -f docker-compose.prod.yml ps
            
            # Débogage - Afficher les logs pour comprendre le problème
            echo "\n--- DEBUG: Container logs ---"
            docker-compose -f docker-compose.prod.yml logs app
            
            # Vérifier la structure de l'image
            echo "\n--- DEBUG: Image contents ---"
            docker run --rm ${{ secrets.DOCKERHUB_USERNAME }}/exercice-4-testing-battle:latest ls -la /app
            
            # Vérifier et configurer le pare-feu
            echo "\n--- DEBUG: Firewall status ---"
            sudo ufw status
            echo "Ensuring port 3001 is open..."
            sudo ufw allow 3001/tcp
            
            # Vérifier l'accessibilité locale
            echo "\n--- DEBUG: Testing local API access ---"
            curl -v localhost:3001 || echo "API not accessible locally"

            # Vérifier l'accessibilité distante
            echo "\n--- DEBUG: Testing remote API access ---"
            curl -v http://31.207.37.112:3001 || echo "API not accessible remotely"
            
            # Nettoyer les images inutilisées
            echo "Cleaning unused images..."
            docker system prune -f
