version: '3.8'

services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: api-conversion
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    ports:
      - "${APP_PORT:-3000}:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:${DB_PORT_CONTAINER}/${POSTGRES_DB}
    # Configuration pour le d√©veloppement avec hot-reload
    volumes:
      - .:/app
      - /app/node_modules
    command: npm run dev
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app_network

  db:
    image: postgres:15-alpine@sha256:d5260755faa5e967902b74b4b9bf9c6ade5c40ed9620b76a675c6bc2ec8160df
    container_name: postgres_db_service
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-conversion_financiere}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${DB_PORT_HOST:-5432}:${DB_PORT_CONTAINER:-5432}"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-conversion_financiere}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      app_network:
        aliases:
          - postgres

networks:
  app_network:
    driver: bridge

volumes:
  postgres_data:
